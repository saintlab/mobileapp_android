buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/repo' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/repo' }
}

apply plugin: 'hugo'

android {
    compileSdkVersion 19
    buildToolsVersion '20.0.0'

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
    }

    defaultConfig {
        applicationId "com.omnom.android.linker"
        minSdkVersion 18
        targetSdkVersion 19
        versionCode 31
        versionName "0.1.31"
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    lintOptions {
        abortOnError false
    }

    productFlavors {
        stand {
        }

        laaaab {
        }
    }

    signingConfigs {
        release {
            def projectDir = project.projectDir.toString()
            Properties releaseProps = new Properties()
            releaseProps.load(new FileInputStream(projectDir + '/release.properties'))
            storeFile file(projectDir + '/release-key.jks')
            storePassword releaseProps['keystore.password']
            keyAlias releaseProps['keyAlias']
            keyPassword releaseProps['keyPassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def file = variant.outputFile
                        variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk"))
                    }
                }
            }
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def file = variant.outputFile
                        variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk"))
                    }
                }
            }
            applicationIdSuffix '.debug'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.squareup.picasso:picasso:2.3.4'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.jakewharton:butterknife:5.1.1'
    compile 'com.netflix.rxjava:rxjava-core:0.19.6'
    compile 'com.netflix.rxjava:rxjava-android:0.19.6'

    compile project(':libraries:Omnom.Zxing')
    compile project(':libraries:Omnom.Utils')
    compile project(':libraries:Omnom.Auth')
    compile project(':libraries:Omnom.Restaurateur')
    compile project(':libraries:Omnom.Beacon')

    androidTestCompile('com.jakewharton.espresso:espresso:1.1-r3') {
        exclude group: 'com.squareup.dagger'
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.0.1@aar') {
        transitive = true;
    }
}
